Project / code info

Jessica Comments 05/08/11:
1. Had to comment out @Override in private class ClickListener on top of onClick function for both MainActivity.java and FindDeviceActivity.java in order to get rid of error.
2. Included two Bluetooth permissions in AndroidManifest.xml
3. Added code in the main.xml under res/layout to create a background for our app menu. I included the bluerobot.jpg file in the drawable-hdpi,ldpi,andmdpi folders. 
4. Added Bluetooth imports to MainActivity.java
5. Added mBluetoothAdapter object to MainActivity.java

Notable classes:
Activity - corresponds to a screen.  Each screen gets its own Activity.  New activities are started using startActivity, and you return to the previous activity using the back button on the phone.
	MainActivity - main screen.
	FindDevicesActivity - shows BlueTooth devices in range and allows you to connect (and displays those that you're already connected to)
	PlayMusicActivity - haven't started this one yet, but here is where the app will interface with a media player and sync the music/files with the connected devices.


Layout ideas:
- Main screen - title, image background, buttons/other fancy things to navigate
- Find Devices screen - tabbed interface showing list of available devices in the area (populated by searching using the Bluetooth adapter), as well as devices already paired.  Allows for connecting/disconnecting multiple devices at a time.
- Play Music screen - interfaced with music player?  Not quite sure how to do this one.


Implementation notes:
- ListView is populated via an ArrayAdapter, which can take in any object and uses the toString method to get the data displayed in the list.  Bluetooth devices have a BluetoothDevice class that contains device info and a readable name, so this will be used to populate the list.
- The built-in Bluetooth file-sending that I tried only sent to one device at a time, and put the other on hold while it was sending.  We need to change how this works so that it can send pieces to each device so that they all end up with the same data at roughly the same time.
- As long as music is playing, there will be data being transferred, so the connections between devices should all stay active.  If there is idle time, we may need to use keep-alive tactics (very small packets so the connection doesn't time out).


TODO:
- Search for nearby devices via BlueTooth; collaborate results here with the "adapter" class required to display info in the ListView, update visible list on the fly
- Interface with the music player to display media on the phone and play it; alternatively, if we can't figure that out, it's probably doable to do a file search through the phone and create your own media library, and then use the built in "media player" objects to play music.
- Connect to multiple devices at the same time and allow for file transfer / streaming to multiple devices simultaneously.  In original file transfer test, the built-in way is to queue up one phone and only transfer to one at a time.  Also, keep-alive to make sure connections aren't dropped.